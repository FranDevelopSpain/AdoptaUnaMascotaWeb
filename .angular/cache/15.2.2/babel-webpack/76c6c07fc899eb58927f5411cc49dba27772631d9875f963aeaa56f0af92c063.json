{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ContactFormModel } from 'src/app/Models/ContactFormModel';\nlet ContactFormComponent = class ContactFormComponent {\n  constructor() {\n    this.ContactModel = new ContactFormModel(); //creamos una instancia de nuestro modelo\n  }\n\n  ngOnInit() {\n    /*En el inicio dejamos los mensajes de error sin mostrat */\n    this.mensajeError = '';\n    this.mensajePassword = '';\n  }\n  /*CREAMOS NUESTRAS VARIABLES Y NUESTRA VARIABLE DEL MODELO \"CONTACTMODEL\"*/\n  onSubmit(formulario) {\n    //llamamos al servicio y el método que contiene\n    alert('Formulario enviado correctamente');\n  }\n  /*METODOS PARA VALIDAR CAMPOS OBLIGATORIOS*/\n  validarCamposObligatorios(evento) {\n    //Hacemos un switch para que ejecute un codigo en funcion del input que se ha modificado\n    switch (evento.target.name) {\n      case 'nombre':\n        const inputNombre = document.getElementById('nombre');\n        if (this.ContactModel.nombre.length >= 3 && /^[A-Z ]+$/i.test(this.ContactModel.nombre)) {\n          inputNombre?.classList.remove('is-invalid');\n          this.nombreCorrecto = true;\n        } else {\n          inputNombre?.classList.add('is-invalid');\n          this.nombreCorrecto = false;\n        }\n        break;\n      case 'apellidos':\n        const inputApellidos = document.getElementById('apellidos');\n        if (this.ContactModel.apellidos.length >= 3 && /^[A-Z ]+$/i.test(this.ContactModel.apellidos)) {\n          inputApellidos?.classList.remove('is-invalid');\n          this.apellidosCorrectos = true;\n        } else {\n          inputApellidos?.classList.add('is-invalid');\n          this.apellidosCorrectos = false;\n        }\n        break;\n      case 'direccion':\n        const inputDireccion = document.getElementById('direccion');\n        if (this.ContactModel.direccion.length >= 5) {\n          inputDireccion?.classList.remove('is-invalid');\n          this.direccionCorrecta = true;\n        } else {\n          inputDireccion?.classList.add('is-invalid');\n          this.direccionCorrecta = false;\n        }\n        break;\n      case 'edad':\n        const edadExpresion = {\n          edad: /^\\d{2}$/\n        };\n        const inputEdad = document.getElementById('edad');\n        if (edadExpresion.edad.test(evento.target.value)) {\n          inputEdad?.classList.remove('is-invalid');\n          this.edadCorrecta = true;\n        } else {\n          inputEdad?.classList.add('is-invalid');\n          this.edadCorrecta = false;\n        }\n        break;\n      case 'numeroTelefono':\n        const telefonoExpresion = {\n          telefono: /^\\d{9}$/\n        };\n        const inputTelefono = document.getElementById('telefono');\n        if (telefonoExpresion.telefono.test(evento.target.value)) {\n          inputTelefono?.classList.remove('is-invalid');\n          this.telefonoCorrecto = true;\n        } else {\n          inputTelefono?.classList.add('is-invalid');\n          this.telefonoCorrecto = false;\n        }\n        break;\n      case 'email':\n        const mailExpresionn = {\n          email: /\\S+@\\S+\\.\\S+/\n        };\n        const inputMail = document.getElementById('email');\n        if (mailExpresionn.email.test(evento.target.value)) {\n          inputMail?.classList.remove('is-invalid');\n          this.mailCorrecto = true;\n        } else {\n          inputMail?.classList.add('is-invalid');\n          this.mailCorrecto = false;\n        }\n        break;\n    }\n  }\n  /*METODO COMPROBACION DE BOOLENAS DE CAMPOS OBLIGATORIOS PARA ACTIVAR EL BOTON DEL FORMULARIO*/\n  comprobarCamposObligatorios(camposCorrectos) {\n    if (this.nombreCorrecto == true && this.apellidosCorrectos == true && this.telefonoCorrecto == true && this.mailCorrecto == true && this.edadCorrecta == true && this.direccionCorrecta == true) {\n      camposCorrectos = true;\n    } else {\n      camposCorrectos = false;\n    }\n    return camposCorrectos;\n  }\n};\nContactFormComponent = __decorate([Component({\n  selector: 'app-contact-form',\n  templateUrl: './contact-form.component.html',\n  styleUrls: ['./contact-form.component.css']\n})], ContactFormComponent);\nexport { ContactFormComponent };","map":{"version":3,"mappings":"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","names":["Component","ContactFormModel","ContactFormComponent","constructor","ngOnInit","mensajeError","mensajePassword","onSubmit","formulario","alert","validarCamposObligatorios","evento","target","name","inputNombre","document","getElementById","ContactModel","nombre","length","test","classList","remove","nombreCorrecto","add","inputApellidos","apellidos","apellidosCorrectos","inputDireccion","direccion","direccionCorrecta","edadExpresion","edad","inputEdad","value","edadCorrecta","telefonoExpresion","telefono","inputTelefono","telefonoCorrecto","mailExpresionn","email","inputMail","mailCorrecto","comprobarCamposObligatorios","camposCorrectos","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/paulamuertefernandez/AdoptaUnaMascotaWeb/src/app/Pages/contact-form/contact-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ContactFormModel } from 'src/app/Models/ContactFormModel';\n\n@Component({\n  selector: 'app-contact-form',\n  templateUrl: './contact-form.component.html',\n  styleUrls: ['./contact-form.component.css']\n})\nexport class ContactFormComponent implements OnInit{\n\n  ContactModel = new ContactFormModel(); //creamos una instancia de nuestro modelo\n\n\n  public mensajeError: string;\n  public mensajePassword: string;\n  public edadCorrecta: boolean; //booleanas para comprobacion de las password\n  public direccionCorrecta: boolean; //booleanas para comprobacion de las password\n  public nombreCorrecto: boolean;\n  public apellidosCorrectos: boolean;\n  public telefonoCorrecto: boolean;\n  public mailCorrecto: boolean;\n  public camposCorrectos: boolean;\n\n  constructor(){}\n\n  ngOnInit(): void {\n          /*En el inicio dejamos los mensajes de error sin mostrat */\n          this.mensajeError = '';\n          this.mensajePassword = '';\n  }\n\n\n    /*CREAMOS NUESTRAS VARIABLES Y NUESTRA VARIABLE DEL MODELO \"CONTACTMODEL\"*/\n  \n\n  \n    onSubmit(formulario: NgForm) {\n      //llamamos al servicio y el método que contiene\n      alert('Formulario enviado correctamente');\n    }\n\n  \n    /*METODOS PARA VALIDAR CAMPOS OBLIGATORIOS*/\n    public validarCamposObligatorios(evento: any): void {\n  \n      //Hacemos un switch para que ejecute un codigo en funcion del input que se ha modificado\n      switch (evento.target.name) {\n        case 'nombre':\n          const inputNombre = document.getElementById('nombre');\n          if (this.ContactModel.nombre.length  >= 3  && /^[A-Z ]+$/i.test(this.ContactModel.nombre)) {\n            inputNombre?.classList.remove('is-invalid');\n            this.nombreCorrecto = true;\n          } else {\n            inputNombre?.classList.add('is-invalid');\n            this.nombreCorrecto = false;\n          }\n          break;\n  \n        case 'apellidos':\n          const inputApellidos = document.getElementById('apellidos');\n          if (this.ContactModel.apellidos.length >= 3 && /^[A-Z ]+$/i.test(this.ContactModel.apellidos)) {\n            inputApellidos?.classList.remove('is-invalid');\n            this.apellidosCorrectos = true;\n          } else {\n            inputApellidos?.classList.add('is-invalid');\n            this.apellidosCorrectos = false;\n          }\n          break;\n\n          case 'direccion':\n            const inputDireccion = document.getElementById('direccion');\n            if (this.ContactModel.direccion.length >= 5) {\n              inputDireccion?.classList.remove('is-invalid');\n              this.direccionCorrecta = true;\n            } else {\n              inputDireccion?.classList.add('is-invalid');\n              this.direccionCorrecta = false;\n            }\n            break;\n\n          case 'edad':\n            const edadExpresion = {\n                edad: /^\\d{2}$/\n                }\n            const inputEdad = document.getElementById('edad');\n            if (edadExpresion.edad.test(evento.target.value)) {\n              inputEdad?.classList.remove('is-invalid');\n              this.edadCorrecta = true;\n            } else {\n              inputEdad?.classList.add('is-invalid');\n              this.edadCorrecta = false;\n            }\n            break;\n  \n        case 'numeroTelefono':\n          const telefonoExpresion = {\n              telefono: /^\\d{9}$/\n              }\n          const inputTelefono = document.getElementById('telefono');\n          if (telefonoExpresion.telefono.test(evento.target.value)) {\n            inputTelefono?.classList.remove('is-invalid');\n            this.telefonoCorrecto = true;\n          } else {\n            inputTelefono?.classList.add('is-invalid');\n            this.telefonoCorrecto = false;\n          }\n          break;\n  \n        case 'email':\n          const mailExpresionn = {\n              email: /\\S+@\\S+\\.\\S+/,\n              }\n          const inputMail = document.getElementById('email');\n          if (mailExpresionn.email.test(evento.target.value)) {\n            inputMail?.classList.remove('is-invalid');\n            this.mailCorrecto = true;\n          } else {\n            inputMail?.classList.add('is-invalid');\n            this.mailCorrecto = false;\n          }\n          break;\n      }\n    }\n  \n    /*METODO COMPROBACION DE BOOLENAS DE CAMPOS OBLIGATORIOS PARA ACTIVAR EL BOTON DEL FORMULARIO*/\n    public comprobarCamposObligatorios(camposCorrectos: boolean): boolean {\n      if(this.nombreCorrecto == true &&\n        this.apellidosCorrectos == true &&\n        this.telefonoCorrecto == true &&\n        this.mailCorrecto == true &&\n        this.edadCorrecta == true &&\n        this.direccionCorrecta == true) {\n          camposCorrectos = true;\n      } else {\n        camposCorrectos = false\n      }\n      return camposCorrectos;\n    }\n    \n  }\n  \n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}